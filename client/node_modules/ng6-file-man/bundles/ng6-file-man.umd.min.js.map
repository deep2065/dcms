{"version":3,"sources":["ng://ng6-file-man/file-manager/reducers/actions.action.ts","ng://ng6-file-man/file-manager/services/node.service.ts","ng://ng6-file-man/file-manager/services/node-clicked.service.ts","ng://ng6-file-man/file-manager/file-manager.component.ts","ng://ng6-file-man/file-manager/components/folder-content/folder-content.component.ts","ng://ng6-file-man/file-manager/components/tree/tree.component.ts","ng://ng6-file-man/file-manager/components/tree/node-lister/node-lister.component.ts","ng://ng6-file-man/file-manager/components/functions/node/node.component.ts","ng://ng6-file-man/file-manager/pipes/map-to-iterable.pipe.ts","ng://ng6-file-man/file-manager/components/nav-bar/nav-bar.component.ts","ng://ng6-file-man/file-manager/reducers/stateReducer.ts","ng://ng6-file-man/file-manager/reducers/reducer.factory.ts","ng://ng6-file-man/file-manager/components/functions/loading-overlay/loading-overlay.component.ts","ng://ng6-file-man/file-manager/pipes/file-size.pipe.ts","ng://ng6-file-man/file-manager/components/functions/upload/upload.component.ts","ng://ng6-file-man/file-manager/components/functions/upload/new-folder/new-folder.component.ts","ng://ng6-file-man/file-manager/components/side-view/side-view.component.ts","ng://ng6-file-man/file-manager/components/navigation/navigation.component.ts","ng://ng6-file-man/file-manager/file-manager.module.ts","ng://ng6-file-man/file-manager/models/tree.model.ts"],"names":["SET_PATH","SET_LOADING_STATE","SET_SELECTED_NODE","NodeService","http","store","_this","this","path","folderId","findNodeByPath","id","get","tree","config","baseURL","api","listFile","params","HttpParams","set","prototype","startManagerAt","dispatch","type","ACTIONS.SET_PATH","payload","refreshCurrentPath","currentPath","children","getNodes","parseNodes","subscribe","data","i","length","parentPath","getParentPath","pathToNode","name","split","slice","join","Observable","observer","getNodesFromServer","next","map","node","createNode","ACTIONS.SET_LOADING_STATE","console","warn","ids","splice","cachedNode","isFolder","dir","isExpanded","pathToParent","nodePath","nodes","reduce","value","index","findNodeById","result","findNodeByIdHelper","keys","Object","obj","foldRecursively","child","hasOwnProperty","document","getElementById","classList","add","foldAll","defineProperty","_path","Injectable","args","providedIn","HttpClient","Store","NodeClickedService","ngxSmartModalService","nodeService","startDownload","parameters","parseParams","reachServer","downloadFile","initDelete","sideEffectHelper","deleteFile","successWithModalClose","searchForString","input","query","searchFiles","res","searchSuccess","createFolder","currentParent","newDirName","dirName","rename","newName","renameFile","httpMethod","apiURL","successMethod","failMethod","a","actionSuccess","b","actionFailed","getModal","open","err","method","apiUrl","toLowerCase","post","delete","window","filter","item","key","remove","searchString","response","setModalData","body","close","error","NgxSmartModalService","FileManagerComponent","nodeClickedService","translate","EventEmitter","setDefaultLang","use","_language","language","ngOnInit","log","pipe","select","state","fileManagerState","isLoading","loading","selectedNode","stayOpen","handleFileManagerClickEvent","onItemClicked","event","itemClicked","emit","searchClicked","ACTIONS.SET_SELECTED_NODE","nodeClickHandler","highlightSelected","parentId","closing","parentNode","sideMenuClosed","treeElement","fcElement","removeClass","highilghtChildElement","parentElement","el","light","prefix","fullId","className","Array","from","getElementsByClassName","fmShowHide","fmOpen","backdropClicked","handleUploadDialog","newDialog","Component","selector","template","styles","encapsulation","ViewEncapsulation","None","TranslateService","Input","Output","FolderContentComponent","newClickedAction","openUploadDialog","TreeComponent","treeModel","currentTreeLevel","ngAfterViewInit","first","ContentChild","TemplateRef","NodeListerComponent","NodeComponent","method1CallForClick","preventDefault","isSingleClick","setTimeout","showMenu","method2CallForDblClick","toggleNodeExpanded","setNodeSelectedState","MapToIterablePipe","transform","dict","push","val","Pipe","NavBarComponent","onClick","newPath","initialState","stateReducer","action","tslib_1","__assign","reducers","LoadingOverlayComponent","timer","timeoutMessage","_","FileSizePipe","bytes","precision","isNaN","parseFloat","String","isFinite","unit","toFixed","units","UploadComponent","uploader","FineUploader","debug","autoUpload","maxConnections","element","request","endpoint","uploadFile","paramsInBody","getCurrentPath","retry","enableAuto","callbacks","onSubmitted","counter","onCancel","onAllComplete","succ","fail","uploadFiles","uploadStoredFiles","createNewFolder","newFolder","createDir","cancelAll","closeDialog","NewFolderComponent","toString","uploadFolder","buttonClicked","onInputChange","inputValue","target","buttonText","ViewChild","SideViewComponent","clickEvent","NavigationComponent","createTranslateLoader","TranslateHttpLoader","NgModule","imports","HttpClientModule","StoreModule","forRoot","CommonModule","NgxSmartModalModule","TranslateModule","loader","provide","TranslateLoader","useFactory","Éµ0","deps","declarations","exports","TreeModel","_currentPath","_nodes","_selectedNodeId"],"mappings":"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","sourcesContent":["import {ActionInterface} from '../interfaces/action.interface';\r\nimport {NodeInterface} from '../interfaces/node.interface';\r\n\r\nexport const SET_PATH = 'SET_PATH';\r\nexport const SET_LOADING_STATE = 'SET_LOADING_STATE';\r\nexport const SET_SELECTED_NODE = 'SET_SELECTED_NODE';\r\n\r\nexport class SetPath implements ActionInterface {\r\n  readonly type = SET_PATH;\r\n  payload: string;\r\n}\r\n\r\nexport class SetLoadingState implements ActionInterface {\r\n  readonly type = SET_LOADING_STATE;\r\n  payload: boolean;\r\n}\r\n\r\nexport class SetSelectedNode implements ActionInterface {\r\n  readonly type = SET_SELECTED_NODE;\r\n  payload: NodeInterface;\r\n}\r\n\r\nexport type Actions = SetPath | SetLoadingState | SetSelectedNode;\r\n","import {Injectable} from '@angular/core';\r\nimport {NodeInterface} from '../interfaces/node.interface';\r\nimport {Observable} from 'rxjs';\r\nimport {TreeModel} from '../models/tree.model';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport * as ACTIONS from '../reducers/actions.action';\r\nimport {Store} from '@ngrx/store';\r\nimport {AppStore} from '../reducers/reducer.factory';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NodeService {\r\n  public tree: TreeModel;\r\n  private _path: string;\r\n\r\n  constructor(private http: HttpClient, private store: Store<AppStore>) {\r\n  }\r\n\r\n  // todo ask server to get parent structure\r\n  public startManagerAt(path: string) {\r\n    this.store.dispatch({type: ACTIONS.SET_PATH, payload: path});\r\n  }\r\n\r\n  public refreshCurrentPath() {\r\n    this.findNodeByPath(this.currentPath).children = {};\r\n    this.getNodes(this.currentPath);\r\n  }\r\n\r\n  getNodes(path: string) {\r\n    this.parseNodes(path).subscribe((data: Array<NodeInterface>) => {\r\n      for (let i = 0; i < data.length; i++) {\r\n        const parentPath = this.getParentPath(data[i].pathToNode);\r\n        this.findNodeByPath(parentPath).children[data[i].name] = data[i];\r\n      }\r\n    });\r\n  }\r\n\r\n  private getParentPath(path: string): string {\r\n    let parentPath = path.split('/');\r\n    parentPath = parentPath.slice(0, parentPath.length - 1);\r\n    return parentPath.join('/');\r\n  }\r\n\r\n  private parseNodes(path: string): Observable<NodeInterface[]> {\r\n    return new Observable(observer => {\r\n      this.getNodesFromServer(path).subscribe((data: Array<any>) => {\r\n        observer.next(data.map(node => this.createNode(path, node)));\r\n        this.store.dispatch({type: ACTIONS.SET_LOADING_STATE, payload: false});\r\n      });\r\n    });\r\n  }\r\n\r\n  private createNode(path, node): NodeInterface {\r\n    if (node.path[0] !== '/') {\r\n      console.warn('[Node Service] Server should return initial path with \"/\"');\r\n      node.path = '/' + node.path;\r\n    }\r\n\r\n    const ids = node.path.split('/');\r\n    if (ids.length > 2 && ids[ids.length - 1] === '') {\r\n      ids.splice(-1, 1);\r\n      node.path = ids.join('/');\r\n    }\r\n\r\n    const cachedNode = this.findNodeByPath(node.path);\r\n\r\n    return <NodeInterface>{\r\n      id: node.id,\r\n      isFolder: node.dir,\r\n      isExpanded: cachedNode ? cachedNode.isExpanded : false,\r\n      pathToNode: node.path,\r\n      pathToParent: this.getParentPath(node.path),\r\n      name: node.name || node.id,\r\n      children: cachedNode ? cachedNode.children : {}\r\n    };\r\n  }\r\n\r\n  private getNodesFromServer = (path: string) => {\r\n    let folderId: any = this.findNodeByPath(path).id;\r\n    folderId = folderId === 0 ? '' : folderId;\r\n\r\n    return this.http.get(\r\n      this.tree.config.baseURL + this.tree.config.api.listFile,\r\n      {params: new HttpParams().set('parentPath', folderId)}\r\n    );\r\n  };\r\n\r\n  public findNodeByPath(nodePath: string): NodeInterface {\r\n    const ids = nodePath.split('/');\r\n    ids.splice(0, 1);\r\n\r\n    return ids.length === 0 ? this.tree.nodes : ids.reduce((value, index) => value['children'][index], this.tree.nodes);\r\n  }\r\n\r\n  public findNodeById(id: number): NodeInterface {\r\n    const result = this.findNodeByIdHelper(id);\r\n\r\n    if (result === null) {\r\n      console.warn('[Node Service] Cannot find node by id. Id not existing or not fetched. Returning root.');\r\n      return this.tree.nodes;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public findNodeByIdHelper(id: number, node: NodeInterface = this.tree.nodes): NodeInterface {\r\n    if (node.id === id)\r\n      return node;\r\n\r\n    const keys = Object.keys(node.children);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      if (typeof node.children[keys[i]] == 'object') {\r\n        const obj = this.findNodeByIdHelper(id, node.children[keys[i]]);\r\n        if (obj != null)\r\n          return obj;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public foldRecursively(node: NodeInterface) {\r\n    // console.log('folding ', node);\r\n    const children = node.children;\r\n\r\n    Object.keys(children).map((child: string) => {\r\n      if (!children.hasOwnProperty(child) || !children[child].isExpanded) {\r\n        return null;\r\n      }\r\n\r\n      this.foldRecursively(children[child]);\r\n      //todo put this getElById into one func (curr inside node.component.ts + fm.component.ts) - this won't be maintainable\r\n      document.getElementById('tree_' + children[child].pathToNode).classList.add('deselected');\r\n      children[child].isExpanded = false;\r\n    });\r\n  }\r\n\r\n  public foldAll() {\r\n    this.foldRecursively(this.tree.nodes);\r\n  }\r\n\r\n  get currentPath(): string {\r\n    return this._path;\r\n  }\r\n\r\n  set currentPath(value: string) {\r\n    this._path = value;\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {NodeInterface} from '../interfaces/node.interface';\nimport {NodeService} from './node.service';\nimport {TreeModel} from '../models/tree.model';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {NgxSmartModalService} from 'ngx-smart-modal';\nimport {AppStore} from '../reducers/reducer.factory';\nimport {Store} from '@ngrx/store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NodeClickedService {\n  public tree: TreeModel;\n\n  constructor(\n    public ngxSmartModalService: NgxSmartModalService,\n    private nodeService: NodeService,\n    private store: Store<AppStore>,\n    private http: HttpClient\n  ) {\n  }\n\n  public startDownload(node: NodeInterface): void {\n    const parameters = this.parseParams({path: node.id});\n    this.reachServer('download', this.tree.config.api.downloadFile + parameters);\n  }\n\n  public initDelete(node: NodeInterface): void {\n    this.sideEffectHelper(\n      'Delete',\n      {path: node.id},\n      'delete',\n      this.tree.config.api.deleteFile,\n      () => this.successWithModalClose()\n    );\n  }\n\n  public searchForString(input: string): void {\n    this.sideEffectHelper(\n      'Search',\n      {query: input},\n      'get',\n      this.tree.config.api.searchFiles,\n      (res) => this.searchSuccess(input, res)\n    );\n  }\n\n  public createFolder(currentParent: number, newDirName: string) {\n    this.sideEffectHelper(\n      'Create Folder',\n      {dirName: newDirName, parentPath: currentParent === 0 ? null : currentParent},\n      'post',\n      this.tree.config.api.createFolder\n    );\n  }\n\n  public rename(id: number, newName: string) {\n    this.sideEffectHelper(\n      'Rename',\n      {path: id, newName: newName},\n      'post',\n      this.tree.config.api.renameFile,\n      () => this.successWithModalClose()\n    );\n  }\n\n  private sideEffectHelper(name: string, parameters: {}, httpMethod: string, apiURL: string,\n                           successMethod = (a) => this.actionSuccess(a),\n                           failMethod = (a, b) => this.actionFailed(a, b)\n  ) {\n    const params = this.parseParams(parameters);\n\n    this.ngxSmartModalService.getModal('waitModal').open();\n\n    this.reachServer(httpMethod, apiURL + params)\n      .subscribe(\n        (a) => successMethod(a),\n        (err) => failMethod(name, err)\n      );\n  }\n\n  private reachServer(method: string, apiUrl: string, data: any = {}): Observable<Object> {\n    switch (method.toLowerCase()) {\n      case 'get':\n        return this.http.get(this.tree.config.baseURL + apiUrl);\n      case 'post':\n        return this.http.post(this.tree.config.baseURL + apiUrl, data);\n      case 'delete':\n        return this.http.delete(this.tree.config.baseURL + apiUrl);\n      case 'download':\n        window.open(this.tree.config.baseURL + apiUrl, '_blank');\n        return null;\n      default:\n        console.warn('[NodeClickedService] Incorrect params for this side-effect');\n        return null;\n    }\n  }\n\n  private parseParams(params: {}): string {\n    let query = '?';\n\n    Object.keys(params).filter(item => params[item] !== null).map(key => {\n      query += key + '=' + params[key] + '&';\n    });\n\n    return query.slice(0, -1);\n  }\n\n  private successWithModalClose() {\n    this.actionSuccess();\n    document.getElementById('side-view').classList.remove('selected');\n  }\n\n  private searchSuccess(input: string, data: any) {\n    const obj = {\n      searchString: input,\n      response: data\n    };\n\n    this.actionSuccess();\n\n    this.ngxSmartModalService.setModalData(obj, 'searchModal', true);\n    this.ngxSmartModalService.getModal('searchModal').open();\n  }\n\n  private actionSuccess(response: string = '') {\n    document.body.classList.remove('dialog-open');\n\n    this.nodeService.refreshCurrentPath();\n    this.ngxSmartModalService.getModal('waitModal').close();\n  }\n\n  private actionFailed(name: string, error: any) {\n    document.body.classList.remove('dialog-open');\n\n    this.ngxSmartModalService.getModal('waitModal').close();\n    this.ngxSmartModalService.getModal('errorModal').open();\n    console.warn('[NodeClickedService] Action \"' + name + '\" failed', error);\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewEncapsulation} from '@angular/core';\r\nimport {select, Store} from '@ngrx/store';\r\nimport {TreeModel} from './models/tree.model';\r\nimport {NodeService} from './services/node.service';\r\nimport {NodeInterface} from './interfaces/node.interface';\r\nimport {SET_LOADING_STATE} from './reducers/actions.action';\r\nimport * as ACTIONS from './reducers/actions.action';\r\nimport {AppStore} from './reducers/reducer.factory';\r\nimport {NgxSmartModalService} from 'ngx-smart-modal';\r\nimport {NodeClickedService} from './services/node-clicked.service';\r\nimport {TranslateService} from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'fm-file-manager',\r\n  template: `<ng-container *ngIf=\"isPopup; then itIsPopup else showContent\"></ng-container>\r\n\r\n<ng-template #itIsPopup>\r\n  <div *ngIf=\"!fmOpen\">\r\n    <button class=\"button big\" (click)=\"fmShowHide()\" translate=\"\">Open file manager</button>\r\n  </div>\r\n  <div class=\"file-manager-backdrop\" *ngIf=\"fmOpen\">\r\n    <div class=\"fmModalInside\">\r\n      <div *ngIf=\"fmOpen; then showContent\"></div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #showContent>\r\n  <div class=\"content\">\r\n    <div class=\"file-manager-navbar\">\r\n      <div class=\"path\">\r\n        <app-nav-bar></app-nav-bar>\r\n      </div>\r\n\r\n      <div class=\"navigation\">\r\n        <app-navigation>\r\n          <div class=\"button close\" (click)=\"fmShowHide()\" *ngIf=\"isPopup\">\r\n            <i class=\"fas fa-2x fa-times\"></i>\r\n          </div>\r\n        </app-navigation>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"holder\">\r\n      <div class=\"file-manager-left\">\r\n        <app-tree [treeModel]=\"tree\">\r\n          <ng-template let-nodes>\r\n            <ng-container [ngTemplateOutletContext]=\"{$implicit: nodes}\"\r\n                          [ngTemplateOutlet]=\"iconTemplate ? iconTemplate : defaultIconTemplate\">\r\n            </ng-container>\r\n          </ng-template>\r\n        </app-tree>\r\n      </div>\r\n\r\n      <div class=\"right\">\r\n        <app-folder-content\r\n          [treeModel]=\"tree\"\r\n          (openUploadDialog)=\"handleUploadDialog($event)\"\r\n          [folderContentTemplate]=\"folderContentTemplate ? folderContentTemplate : defaultFolderContentTemplate\"\r\n          [folderContentNewTemplate]=\"folderContentNewTemplate ? folderContentNewTemplate : defaultFolderContentNewTemplate\"\r\n          [folderContentBackTemplate]=\"folderContentBackTemplate ? folderContentBackTemplate : defaultFolderContentBackTemplate\">\r\n        </app-folder-content>\r\n      </div>\r\n\r\n      <app-side-view id=\"side-view\"\r\n                     [node]=\"selectedNode\"\r\n                     [sideViewTemplate]=\"sideViewTemplate ? sideViewTemplate : defaultSideViewTemplate\"\r\n                     [allowFolderDownload]=\"tree.config.options.allowFolderDownload\"\r\n                     (clickEvent)=\"handleFileManagerClickEvent($event)\">\r\n      </app-side-view>\r\n    </div>\r\n  </div>\r\n\r\n  <app-upload *ngIf=\"newDialog\"\r\n              [openDialog]=\"newDialog\"\r\n              (closeDialog)=\"handleUploadDialog(false)\"\r\n              (createDir)=\"handleFileManagerClickEvent({type: 'createFolder', payload: $event})\">\r\n  </app-upload>\r\n\r\n  <app-loading-overlay\r\n    *ngIf=\"loading\"\r\n    [loadingOverlayTemplate]=\"loadingOverlayTemplate ? loadingOverlayTemplate : defaultLoadingOverlayTemplate\">\r\n  </app-loading-overlay>\r\n</ng-template>\r\n\r\n<ng-template let-node #defaultIconTemplate>\r\n  <div class=\"file-manager-node\" style=\"display: inline-block; padding: 3px\">\r\n    <div *ngIf=\"node.isFolder; then itIsFolder else showFile\"></div>\r\n\r\n    <ng-template #itIsFolder>\r\n      <div *ngIf=\"node.isExpanded; then isFolderExpanded else isFolderClosed\"></div>\r\n    </ng-template>\r\n\r\n    <ng-template #showFile><i class=\"fas fa-file child\"></i></ng-template>\r\n    <ng-template #isFolderExpanded><i class=\"fas fa-folder-open child\"></i></ng-template>\r\n    <ng-template #isFolderClosed><i class=\"fas fa-folder child\"></i></ng-template>\r\n\r\n    <span>{{node.name}}</span>\r\n  </div>\r\n</ng-template>\r\n<ng-template let-node #defaultFolderContentTemplate>\r\n  <div class=\"file-manager-item\">\r\n    <div class=\"file-preview\">\r\n      <div *ngIf=\"node.isFolder; then itIsFolder else showFile\"></div>\r\n      <ng-template #itIsFolder><i class=\"fas fa-3x fa-folder child\"></i></ng-template>\r\n      <ng-template #showFile><i class=\"fas fa-3x fa-file child\"></i></ng-template>\r\n    </div>\r\n    <div class=\"file-name\">\r\n      {{node.name}}\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #defaultFolderContentNewTemplate>\r\n  <div class=\"file-manager-item\">\r\n    <div class=\"file-preview\" style=\"width: 100%; height:100%\">\r\n      <i class=\"fas fa-3x fa-plus child\" style=\"line-height: 2\"></i>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template let-node #defaultFolderContentBackTemplate>\r\n  <div class=\"file-manager-item\">\r\n    <div class=\"file-preview\" style=\"width: 100%; height:100%\">\r\n      <i class=\"fas fa-2x fa-ellipsis-h\" style=\"line-height: 5\"></i>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<ng-template let-timeoutMessage #defaultLoadingOverlayTemplate>\r\n  <div class=\"file-manager-backdrop loading\" (click)=\"backdropClicked()\">\r\n    <div class=\"file-manager-error\" *ngIf=\"timeoutMessage\">{{timeoutMessage | translate}}</div>\r\n  </div>\r\n  <div class=\"spinner\">\r\n    <i class=\"fas fa-5x fa-spin fa-sync-alt\"></i>\r\n  </div>\r\n</ng-template>\r\n<ng-template let-node #defaultSideViewTemplate>\r\n  <div style=\"position: absolute; bottom: 0; width: 100%; margin: 5px auto\">\r\n    <span *ngIf=\"node.isFolder\" translate>No data available for this folder</span>\r\n    <span *ngIf=\"!node.isFolder\" translate>No data available for this file</span>\r\n  </div>\r\n</ng-template>\r\n\r\n<ngx-smart-modal identifier=\"renameModal\" [dismissable]=\"false\" [closable]=\"false\" *ngIf=\"selectedNode\" #renameModal>\r\n  <h2 class=\"modal-title\" translate>\r\n    Rename file\r\n  </h2>\r\n  <p class=\"rename-name\" translate>\r\n    Old name\r\n  </p>\r\n  <span style=\"margin: 8px\">{{selectedNode.name}}</span>\r\n  <p class=\"rename-name\" translate>\r\n    New name\r\n  </p>\r\n  <input placeholder=\"New name\" type=\"text\" class=\"rename-input\" [value]=\"selectedNode.name\" #renameInput\r\n         (keyup.enter)=\"handleFileManagerClickEvent({type: 'rename', value: renameInput.value})\"\r\n         onclick=\"this.select();\">\r\n  <br>\r\n\r\n  <div class=\"rename-button\">\r\n    <button class=\"button big\" translate\r\n            (click)=\"handleFileManagerClickEvent({type: 'rename', value: renameInput.value})\"\r\n            [disabled]=\"renameInput.value === selectedNode.name || renameInput.value.length === 0\">\r\n      Rename\r\n    </button>\r\n    <button class=\"button big\" (click)=\"renameModal.close()\" translate>\r\n      Cancel\r\n    </button>\r\n  </div>\r\n\r\n</ngx-smart-modal>\r\n<ngx-smart-modal *ngIf=\"selectedNode\" identifier=\"confirmDeleteModal\" #deleteModal\r\n                 [dismissable]=\"false\" [closable]=\"false\">\r\n  <h2 class=\"modal-title\">\r\n    <span translate>You are trying to delete following </span>\r\n    <span *ngIf=\"selectedNode.isFolder\" translate>folder</span>\r\n    <span *ngIf=\"!selectedNode.isFolder\" translate>file</span>\r\n  </h2>\r\n\r\n  <div style=\"width: 100%; margin: 5px auto; text-align: center\">{{selectedNode.name}}</div>\r\n\r\n  <div class=\"rename-button\">\r\n    <button class=\"button big\" (click)=\"handleFileManagerClickEvent({type: 'remove'})\">\r\n      <span translate>Yes, delete this </span>\r\n      <span *ngIf=\"selectedNode.isFolder\" translate>folder</span>\r\n      <span *ngIf=\"!selectedNode.isFolder\" translate>file</span>\r\n    </button>\r\n    <button class=\"button big\" (click)=\"deleteModal.close()\" translate>\r\n      Cancel\r\n    </button>\r\n  </div>\r\n</ngx-smart-modal>\r\n<ngx-smart-modal identifier=\"searchModal\" #searchModal [closable]=\"true\">\r\n  <h2 class=\"modal-title\" style=\"margin-bottom: 2px\" translate\r\n      *ngIf=\"searchModal.hasData() && searchModal.getData().response.length !== 0\">\r\n    Search results for\r\n  </h2>\r\n  <h2 class=\"modal-title\" style=\"margin-bottom: 2px\" translate\r\n      *ngIf=\"!searchModal.hasData() || searchModal.getData().response.length === 0\">\r\n    No results found for\r\n  </h2>\r\n  <div style=\"text-align: center\" *ngIf=\"searchModal.hasData()\">{{searchModal.getData().searchString}}</div>\r\n\r\n  <div *ngIf=\"searchModal.hasData() && searchModal.getData().response.length !== 0\">\r\n    <table style=\"margin: 0 auto\">\r\n      <tr>\r\n        <td class=\"table-item table-head\" translate>File name</td>\r\n        <td class=\"table-item-short table-head\" translate>Size</td>\r\n      </tr>\r\n      <tr *ngFor=\"let item of searchModal.getData().response\" (click)=\"searchClicked(item)\">\r\n        <td style=\"cursor: pointer\">\r\n          <ng-container *ngIf=\"item.fileCategory === 'D'; else file\">\r\n            <i class=\"fas fa-folder search-output-icon\"></i>\r\n          </ng-container>\r\n          <ng-template #file>\r\n            <i class=\"fas fa-file search-output-icon\"></i>\r\n          </ng-template>\r\n          <span style=\"text-overflow: ellipsis\">{{item.name}}</span>\r\n        </td>\r\n        <td class=\"table-item-short\">{{item.size}}</td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n</ngx-smart-modal>\r\n<ngx-smart-modal identifier=\"waitModal\" [closable]=\"false\" [dismissable]=\"false\" [escapable]=\"false\">\r\n  <h2 class=\"modal-title\" style=\"margin-top: 20px\">\r\n    {{'Processing request' | translate}}...\r\n  </h2>\r\n\r\n  <div style=\"text-align: center; height: 70px\">\r\n    <i class=\"fas fa-spinner fa-spin fa-4x\"></i>\r\n  </div>\r\n</ngx-smart-modal>\r\n<ngx-smart-modal identifier=\"errorModal\" [closable]=\"true\">\r\n  <h2 class=\"modal-title\" style=\"margin-top: 20px\">\r\n    {{'Something went wrong with your request' | translate}}...\r\n  </h2>\r\n</ngx-smart-modal>\r\n`,\r\n  styles: [`.content{height:100%;min-width:850px}.holder{display:flex;height:calc(100% - 75px)}.path{margin:auto 0;display:block}.navigation{margin:auto 0;display:flex}.navigation .button{margin:0 10px;padding:0;position:relative}.right{width:100%;position:relative;overflow:auto}.file-name{width:100px;height:25px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.file-preview{margin:auto}.file-preview i{line-height:1.5}.spinner{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);cursor:progress}.rename-button{margin:20px auto;display:block;text-align:center}.modal-title{margin-top:5px;text-align:center}.search-output{margin:15px 0}.search-output-icon{margin:2px 5px}.table-item{width:80%}.table-item-short{width:20%;text-align:right}`],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class FileManagerComponent implements OnInit {\r\n  @Input() iconTemplate: TemplateRef<any>;\r\n  @Input() folderContentTemplate: TemplateRef<any>;\r\n  @Input() folderContentBackTemplate: TemplateRef<any>;\r\n  @Input() folderContentNewTemplate: TemplateRef<any>;\r\n  @Input() loadingOverlayTemplate: TemplateRef<any>;\r\n  @Input() sideViewTemplate: TemplateRef<any>;\r\n\r\n  @Input() tree: TreeModel;\r\n  @Input() isPopup: boolean = false;\r\n  @Output() itemClicked = new EventEmitter();\r\n\r\n  private _language: string = 'en';\r\n  @Input() set language(value: string) {\r\n    this._language = value;\r\n    this.translate.use(this.language);\r\n  }\r\n\r\n  get language(): string {\r\n    return this._language;\r\n  }\r\n\r\n  selectedNode: NodeInterface;\r\n  sideMenuClosed = true;\r\n\r\n  fmOpen = false;\r\n  loading: boolean;\r\n  newDialog = false;\r\n\r\n  constructor(\r\n    private store: Store<AppStore>,\r\n    private nodeService: NodeService,\r\n    private nodeClickedService: NodeClickedService,\r\n    public ngxSmartModalService: NgxSmartModalService,\r\n    public translate: TranslateService\r\n  ) {\r\n    translate.setDefaultLang('en');\r\n    translate.use('en');\r\n  }\r\n\r\n  ngOnInit() {\r\n    // @ts-ignore\r\n    window.console = window.console || {};\r\n    window.console.log = window.console.log || function () {\r\n    };\r\n\r\n    this.nodeService.tree = this.tree;\r\n    this.nodeClickedService.tree = this.tree;\r\n    this.nodeService.startManagerAt(this.tree.currentPath);\r\n\r\n    this.store\r\n      .pipe(select(state => state.fileManagerState.isLoading))\r\n      .subscribe((data: boolean) => {\r\n        this.loading = data;\r\n      });\r\n\r\n    this.store\r\n      .pipe(select(state => state.fileManagerState.selectedNode))\r\n      .subscribe((node: NodeInterface) => {\r\n        if (!node) {\r\n          return;\r\n        }\r\n\r\n        // fixed highlighting error when closing node but not changing path\r\n        if ((node.isExpanded && node.pathToNode !== this.nodeService.currentPath) && !node.stayOpen) {\r\n          return;\r\n        }\r\n\r\n        this.handleFileManagerClickEvent({type: 'select', node: node});\r\n      });\r\n  }\r\n\r\n  onItemClicked(event: any): void {\r\n    this.itemClicked.emit(event);\r\n  }\r\n\r\n  searchClicked(data: any) {\r\n    // console.log(data);\r\n\r\n    const node = this.nodeService.findNodeById(data.id);\r\n    this.ngxSmartModalService.getModal('searchModal').close();\r\n    this.store.dispatch({type: ACTIONS.SET_SELECTED_NODE, payload: node});\r\n  }\r\n\r\n  handleFileManagerClickEvent(event: any) {\r\n    switch (event.type) {\r\n      case 'closeSideView' :\r\n        return this.nodeClickHandler(event.node, true);\r\n\r\n      case 'select' :\r\n        this.onItemClicked(event);\r\n        this.highlightSelected(event.node);\r\n        return this.nodeClickHandler(event.node);\r\n\r\n      case 'download' :\r\n        this.nodeClickedService.startDownload(event.node);\r\n        return this.onItemClicked(event);\r\n\r\n      case 'renameConfirm' :\r\n        return this.ngxSmartModalService.getModal('renameModal').open();\r\n      case 'rename' :\r\n        this.ngxSmartModalService.getModal('renameModal').close();\r\n\r\n        this.nodeClickedService.rename(this.selectedNode.id, event.value);\r\n        return this.onItemClicked({\r\n          type: event.type,\r\n          node: this.selectedNode,\r\n          newName: event.value\r\n        });\r\n\r\n      case 'removeAsk':\r\n        return this.ngxSmartModalService.getModal('confirmDeleteModal').open();\r\n      case 'remove':\r\n        this.ngxSmartModalService.getModal('confirmDeleteModal').close();\r\n\r\n        this.nodeClickedService.initDelete(this.selectedNode);\r\n        return this.onItemClicked({\r\n          type: event.type,\r\n          node: this.selectedNode\r\n        });\r\n\r\n      case 'createFolder' :\r\n        const parentId = this.nodeService.findNodeByPath(this.nodeService.currentPath).id;\r\n\r\n        this.nodeClickedService.createFolder(parentId, event.payload);\r\n        return this.onItemClicked({\r\n          type: event.type,\r\n          parentId: parentId,\r\n          newDirName: event.payload\r\n        });\r\n    }\r\n  }\r\n\r\n  nodeClickHandler(node: NodeInterface, closing?: boolean) {\r\n    if (node.name === 'root') {\r\n      return;\r\n    }\r\n\r\n    if (closing) {\r\n      const parentNode = this.nodeService.findNodeByPath(this.nodeService.currentPath);\r\n      this.store.dispatch({type: ACTIONS.SET_SELECTED_NODE, payload: parentNode});\r\n      this.sideMenuClosed = true;\r\n    }\r\n    else {\r\n      if (this.selectedNode === node && this.sideMenuClosed)\r\n        this.sideMenuClosed = false;\r\n      else if (this.selectedNode === node && !this.sideMenuClosed)\r\n        this.sideMenuClosed = true;\r\n      else if (this.selectedNode !== node && this.sideMenuClosed)\r\n        this.sideMenuClosed = false;\r\n      else if (this.selectedNode !== node && !this.sideMenuClosed)\r\n        this.sideMenuClosed = false;\r\n    }\r\n\r\n    this.selectedNode = node;\r\n\r\n    // todo investigate this workaround - warning: [File Manager] failed to find requested node for path: [path]\r\n    if(!document.getElementById('side-view')) {\r\n      return;\r\n    }\r\n\r\n    if (this.sideMenuClosed) {\r\n      document.getElementById('side-view').classList.remove('selected');\r\n    } else {\r\n      document.getElementById('side-view').classList.add('selected');\r\n    }\r\n  }\r\n\r\n  // todo stay DRY!\r\n  highlightSelected(node: NodeInterface) {\r\n    let pathToNode = node.pathToNode;\r\n\r\n    if (pathToNode.length === 0) {\r\n      pathToNode = 'root';\r\n    }\r\n\r\n    const treeElement = this.getElementById(pathToNode, 'tree_');\r\n    const fcElement = this.getElementById(pathToNode, 'fc_');\r\n    if (!treeElement && !fcElement) {\r\n      console.warn('[File Manager] failed to find requested node for path:', pathToNode);\r\n      return;\r\n    }\r\n\r\n    this.removeClass('highlighted');\r\n    this.removeClass('light');\r\n\r\n    if (fcElement)\r\n      this.highilghtChildElement(fcElement);\r\n    if (treeElement)\r\n      this.highilghtChildElement(treeElement, true);\r\n\r\n    // parent node highlight\r\n    let pathToParent = node.pathToParent;\r\n    if (pathToParent === null || node.pathToNode === this.nodeService.currentPath) {\r\n      return;\r\n    }\r\n\r\n    if (pathToParent.length === 0) {\r\n      pathToParent = 'root';\r\n    }\r\n\r\n    const parentElement = this.getElementById(pathToParent, 'tree_');\r\n    if (!parentElement) {\r\n      console.warn('[File Manager] failed to find requested parent node for path:', pathToParent);\r\n      return;\r\n    }\r\n\r\n    this.highilghtChildElement(parentElement);\r\n  }\r\n\r\n  private highilghtChildElement(el: HTMLElement, light: boolean = false) {\r\n    el.children[0] // appnode div wrapper\r\n      .children[0] // ng template first item\r\n      .classList.add('highlighted');\r\n\r\n    if (light)\r\n      el.children[0]\r\n        .children[0]\r\n        .classList.add('light');\r\n  }\r\n\r\n  private getElementById(id: string, prefix: string = ''): HTMLElement {\r\n    const fullId = prefix + id;\r\n    return document.getElementById(fullId);\r\n  }\r\n\r\n  private removeClass(className: string) {\r\n    Array.from(document.getElementsByClassName(className))\r\n      .map((el: HTMLElement) => el.classList.remove(className));\r\n  }\r\n\r\n  fmShowHide() {\r\n    this.fmOpen = !this.fmOpen;\r\n  }\r\n\r\n  backdropClicked() {\r\n    // todo get rid of this ugly workaround\r\n    // todo fire userCanceledLoading event\r\n    this.store.dispatch({type: SET_LOADING_STATE, payload: false});\r\n  }\r\n\r\n  handleUploadDialog(event: any) {\r\n    this.newDialog = event;\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output, TemplateRef} from '@angular/core';\r\nimport {select, Store} from '@ngrx/store';\r\nimport {TreeModel} from '../../models/tree.model';\r\nimport {NodeService} from '../../services/node.service';\r\nimport {NodeInterface} from '../../interfaces/node.interface';\r\nimport {AppStore} from '../../reducers/reducer.factory';\r\n\r\n@Component({\r\n  selector: 'app-folder-content',\r\n  template: `<div class=\"item-holder\">\r\n  <ng-container *ngIf=\"nodes.id !== 0\">\r\n    <app-node [node]=nodes id=\"{{nodes.pathToNode}}\">\r\n      <ng-container [ngTemplateOutletContext]=\"{$implicit: nodes}\"\r\n                    [ngTemplateOutlet]=\"folderContentBackTemplate\">\r\n      </ng-container>\r\n    </app-node>\r\n  </ng-container>\r\n\r\n  <ng-container *ngFor=\"let node of obj.keys(nodes.children)\">\r\n    <app-node [node]=\"nodes.children[node]\"\r\n              id=\"fc_{{nodes.children[node].pathToNode}}\">\r\n      <ng-container [ngTemplateOutletContext]=\"{$implicit: nodes.children[node]}\"\r\n                    [ngTemplateOutlet]=\"folderContentTemplate\">\r\n      </ng-container>\r\n    </app-node>\r\n  </ng-container>\r\n\r\n  <div class=\"new\" (click)=\"newClickedAction()\">\r\n    <ng-container [ngTemplateOutlet]=\"folderContentNewTemplate\"></ng-container>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`.item-holder{box-sizing:border-box;display:flex;flex-flow:wrap}.item-holder .new{display:inline}`]\r\n})\r\nexport class FolderContentComponent implements OnInit {\r\n  @Input() folderContentTemplate: TemplateRef<any>;\r\n  @Input() folderContentBackTemplate: TemplateRef<any>;\r\n  @Input() folderContentNewTemplate: TemplateRef<any>;\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  @Output() openUploadDialog = new EventEmitter();\r\n\r\n  nodes: NodeInterface;\r\n  obj = Object;\r\n\r\n  constructor(\r\n    private nodeService: NodeService,\r\n    private store: Store<AppStore>\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.store\r\n      .pipe(select(state => state.fileManagerState.path))\r\n      .subscribe((path: string) => {\r\n        this.nodes = this.nodeService.findNodeByPath(path);\r\n      });\r\n  }\r\n\r\n  newClickedAction() {\r\n    this.openUploadDialog.emit(true);\r\n  }\r\n}\r\n","import {AfterViewInit, Component, ContentChild, Input, OnInit, TemplateRef} from '@angular/core';\r\nimport {NodeInterface} from '../../interfaces/node.interface';\r\nimport {TreeModel} from '../../models/tree.model';\r\nimport {NodeService} from '../../services/node.service';\r\nimport {select, Store} from '@ngrx/store';\r\nimport {AppStore} from '../../reducers/reducer.factory';\r\nimport * as ACTIONS from '../../reducers/actions.action';\r\nimport {first} from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-tree',\r\n  template: `<app-node-lister [showFiles]=\"treeModel.config.options.showFilesInsideTree\"\r\n                 [nodes]=\"{children: nodes}\">\r\n  <ng-template let-nodes>\r\n    <ng-container [ngTemplateOutletContext]=\"{$implicit: nodes}\" [ngTemplateOutlet]=\"templateRef\"></ng-container>\r\n  </ng-template>\r\n</app-node-lister>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class TreeComponent implements AfterViewInit, OnInit {\r\n  @ContentChild(TemplateRef) templateRef: TemplateRef<any>;\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  nodes: NodeInterface;\r\n  currentTreeLevel = '';\r\n\r\n  constructor(\r\n    private nodeService: NodeService,\r\n    private store: Store<AppStore>\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.nodes = this.treeModel.nodes;\r\n\r\n    //todo move this store to proper place\r\n    this.store\r\n      .pipe(select(state => state.fileManagerState.path))\r\n      .subscribe((path: string) => {\r\n        this.nodeService.getNodes(path);\r\n\r\n        this.currentTreeLevel = this.treeModel.currentPath;\r\n\r\n        return this.treeModel.currentPath = path;\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.store\r\n      .pipe(select(state => state.fileManagerState.path))\r\n      .pipe(first())\r\n      .subscribe((path: string) => {\r\n        const nodes = this.nodeService.findNodeByPath(path);\r\n        this.store.dispatch({type: ACTIONS.SET_SELECTED_NODE, payload: nodes});\r\n      });\r\n  }\r\n}\r\n","import {Component, ContentChild, Input, OnInit, TemplateRef} from '@angular/core';\nimport {NodeInterface} from '../../../interfaces/node.interface';\n\n@Component({\n  selector: 'app-node-lister',\n  template: `<ul class=\"node-lister-flist\">\r\n  <!--In order to avoid having to create that extra div, we can instead use ng-container directive-->\r\n  <ng-container *ngFor=\"let node of obj.keys(nodes)\">\r\n    <li class=\"node-lister-list-item\" *ngIf=\"nodes[node].isFolder || showFiles\">\r\n\r\n      <app-node class=\"node-lister-app-node\" [node]=\"nodes[node]\" id=\"tree_{{nodes[node].id === 0 ? 'root' : nodes[node].pathToNode}}\">\r\n        <ng-container [ngTemplateOutletContext]=\"{$implicit: (nodes[node])}\"\r\n                      [ngTemplateOutlet]=\"templateRef\">\r\n        </ng-container>\r\n      </app-node>\r\n\r\n      <app-node-lister class=\"node-lister\" *ngIf=\"obj.keys(nodes[node].children).length > 0\"\r\n                       [showFiles]=\"showFiles\" [nodes]=\"nodes[node].children\">\r\n        <ng-template let-nodes>\r\n          <ng-container [ngTemplateOutletContext]=\"{$implicit: (nodes)}\"\r\n                        [ngTemplateOutlet]=\"templateRef\">\r\n          </ng-container>\r\n        </ng-template>\r\n      </app-node-lister>\r\n    </li>\r\n  </ng-container>\r\n</ul>\r\n`,\n  styles: [`.node-lister-flist{margin:0 0 0 1em;padding:0;list-style:none;white-space:nowrap}.node-lister-list-item{list-style:none;line-height:1.2em;font-size:1em;display:inline}.node-lister-list-item .node-lister-app-node.deselected+.node-lister ul{display:none}`]\n})\nexport class NodeListerComponent implements OnInit {\n  @ContentChild(TemplateRef) templateRef: TemplateRef<any>;\n  @Input() nodes: NodeInterface;\n  @Input() showFiles: boolean;\n\n  obj = Object;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {NodeInterface} from '../../../interfaces/node.interface';\r\nimport {Store} from '@ngrx/store';\r\n\r\nimport * as ACTIONS from '../../../reducers/actions.action';\r\nimport {AppStore} from '../../../reducers/reducer.factory';\r\nimport {NodeService} from '../../../services/node.service';\r\nimport {NodeClickedService} from '../../../services/node-clicked.service';\r\n\r\n@Component({\r\n  selector: 'app-node',\r\n  template: `<div #customTemplate (dblclick)=\"method2CallForDblClick($event)\" (click)=\"method1CallForClick($event)\">\r\n  <ng-content></ng-content>\r\n</div>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class NodeComponent implements OnInit {\r\n  @Input() node: NodeInterface;\r\n  isSingleClick = true;\r\n\r\n  constructor(\r\n    private store: Store<AppStore>,\r\n    private nodeService: NodeService,\r\n    private nodeClickedService: NodeClickedService\r\n  ) {\r\n  }\r\n\r\n  public method1CallForClick(event: MouseEvent) {\r\n    event.preventDefault();\r\n\r\n    this.isSingleClick = true;\r\n    setTimeout(() => {\r\n      if (this.isSingleClick) {\r\n        this.showMenu();\r\n      }\r\n    }, 200);\r\n  }\r\n\r\n  // todo event.preventDefault for double click\r\n  public method2CallForDblClick(event: any) {\r\n    event.preventDefault();\r\n\r\n    this.isSingleClick = false;\r\n    this.open();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private open() {\r\n    if (!this.node.isFolder) {\r\n      this.nodeClickedService.startDownload(this.node);\r\n      return;\r\n    }\r\n\r\n    if (this.node.stayOpen) {\r\n      if (this.node.name == 'root') {\r\n        this.nodeService.foldAll();\r\n      }\r\n\r\n      this.store.dispatch({type: ACTIONS.SET_PATH, payload: this.node.pathToNode});\r\n      return;\r\n    }\r\n\r\n    this.toggleNodeExpanded();\r\n\r\n    if (this.node.isExpanded) {\r\n      this.store.dispatch({type: ACTIONS.SET_PATH, payload: this.node.pathToNode});\r\n    }\r\n\r\n    this.setNodeSelectedState();\r\n  }\r\n\r\n  private showMenu() {\r\n    this.store.dispatch({type: ACTIONS.SET_SELECTED_NODE, payload: this.node});\r\n  }\r\n\r\n  private toggleNodeExpanded() {\r\n    this.node.isExpanded = !this.node.isExpanded;\r\n  }\r\n\r\n  private setNodeSelectedState() {\r\n    if (!this.node.isExpanded) {\r\n      document.getElementById('tree_' + this.node.pathToNode).classList.add('deselected');\r\n\r\n      this.nodeService.foldRecursively(this.node);\r\n\r\n      this.store.dispatch({type: ACTIONS.SET_PATH, payload: this.node.pathToParent});\r\n    } else {\r\n      document.getElementById('tree_' + this.node.pathToNode).classList.remove('deselected');\r\n    }\r\n  }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'mapToIterablePipe'\n})\nexport class MapToIterablePipe implements PipeTransform {\n  transform(dict: Object) {\n    const a = [];\n    for (const key in dict) {\n      if (dict.hasOwnProperty(key)) {\n        a.push({key: key, val: dict[key]});\n      }\n    }\n\n    return a;\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {select, Store} from '@ngrx/store';\nimport * as ACTIONS from '../../reducers/actions.action';\nimport {AppStore} from '../../reducers/reducer.factory';\nimport {NodeService} from '../../services/node.service';\n\n@Component({\n  selector: 'app-nav-bar',\n  template: `<div>\n  >> <span *ngFor=\"let to of currentPath; let i = index\">\n  <a class=\"link\" (click)=\"onClick(currentPath, i)\">\n    <div *ngIf=\"to === '' || to === 'root'; then icon else name\"></div>\n    <ng-template #icon><i class=\"fas fa-home\"></i></ng-template>\n    <ng-template #name>{{to}}</ng-template>\n  </a> /\n  </span>\n</div>\n`,\n  styles: [``]\n})\nexport class NavBarComponent implements OnInit {\n  currentPath: string[];\n\n  constructor(\n    private store: Store<AppStore>,\n    private nodeService: NodeService\n  ) {\n  }\n\n  ngOnInit() {\n    this.store\n      .pipe(select(state => state.fileManagerState.path))\n      .subscribe((data: string) => {\n        this.nodeService.currentPath = data;\n        this.currentPath = data.split('/');\n      });\n  }\n\n  onClick(path: string[], index: number) {\n    const newPath = path.slice(0, index + 1).join('/');\n    this.store.dispatch({type: ACTIONS.SET_PATH, payload: newPath});\n  }\n\n}\n","import {StateInterface} from '../interfaces/state.interface';\r\nimport * as ACTIONS from './actions.action';\r\n\r\nconst initialState: StateInterface = {\r\n  path: '',\r\n  isLoading: true,\r\n  selectedNode: null\r\n};\r\n\r\nexport function stateReducer(state: StateInterface = initialState, action: ACTIONS.Actions): StateInterface {\r\n  // console.log('Previous state: ', state);\r\n  // console.log('ACTION type: ', action.type);\r\n  // console.log('ACTION payload: ', action.payload);\r\n\r\n  switch (action.type) {\r\n    case ACTIONS.SET_PATH :\r\n      if (state.path === action.payload) {\r\n        return state;\r\n      }\r\n      return {...state, path: action.payload, isLoading: true};\r\n    case ACTIONS.SET_LOADING_STATE :\r\n      return {...state, isLoading: action.payload};\r\n    case ACTIONS.SET_SELECTED_NODE :\r\n      return {...state, selectedNode: action.payload};\r\n    default:\r\n      return initialState;\r\n  }\r\n}\r\n","import {stateReducer} from './stateReducer';\nimport {ActionReducerMap} from '@ngrx/store';\nimport {StateInterface} from '../interfaces/state.interface';\n\nexport interface AppStore {\n  fileManagerState: StateInterface;\n}\n\nexport const reducers: ActionReducerMap<AppStore> = {\n  fileManagerState: stateReducer\n};\n","import {Component, Input, OnInit, TemplateRef} from '@angular/core';\r\nimport {_} from '@biesbjerg/ngx-translate-extract/dist/utils/utils';\r\nimport {timer} from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-loading-overlay',\r\n  template: `<ng-container\n  [ngTemplateOutletContext]=\"{$implicit: timeoutMessage}\"\n  [ngTemplateOutlet]=\"loadingOverlayTemplate\">\n</ng-container>\n`,\r\n  styles: [``]\r\n})\r\nexport class LoadingOverlayComponent implements OnInit {\r\n  @Input() loadingOverlayTemplate: TemplateRef<any>;\r\n  timeoutMessage: any;\r\n\r\n  // todo unsubscribe from 'list' event - now we are only dismissing this component\r\n  ngOnInit() {\r\n    timer(2000).subscribe(() => {\r\n      this.timeoutMessage = _('Troubles with loading? Click anywhere to cancel loading');\r\n    });\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/*\n * Convert bytes into largest possible unit.\n * Takes an precision argument that defaults to 2.\n * Usage:\n *   bytes | fileSize:precision\n * Example:\n *   {{ 1024 |  fileSize}}\n *   formats to: 1 KB\n*/\n@Pipe({name: 'fileSize'})\nexport class FileSizePipe implements PipeTransform {\n\n  private units = [\n    'bytes',\n    'KB',\n    'MB',\n    'GB',\n    'TB',\n    'PB'\n  ];\n\n  transform(bytes: number = 0, precision: number = 2 ) : string {\n    if ( isNaN( parseFloat( String(bytes) )) || ! isFinite( bytes ) ) return '?';\n\n    let unit = 0;\n\n    while ( bytes >= 1024 ) {\n      bytes /= 1024;\n      unit ++;\n    }\n\n    return bytes.toFixed( + precision ) + ' ' + this.units[ unit ];\n  }\n}\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {FineUploader} from 'fine-uploader';\r\nimport {NodeService} from '../../../services/node.service';\r\n\r\n@Component({\r\n  selector: 'app-upload',\r\n  template: `<div class=\"backdrop\" (click)=\"newClickedAction()\"></div>\n<div class=\"upload-background\">\n  <div class=\"buttons\">\n    <button class=\"button\" [disabled]=\"newFolder\" (click)=\"createNewFolder()\" translate>Create new folder</button>\n  </div>\n\n  <div *ngIf=\"newFolder\">\n    <div class=\"buttons\">\n      <app-new-folder (buttonClicked)=\"createNewFolder($event)\"></app-new-folder>\n    </div>\n  </div>\n\n  <div id=\"fine-uploader\">\n  </div>\n\n\n  <div class=\"buttons\">\n    <button class=\"button big\" [disabled]=\"this.counter < 1\" (click)=\"uploadFiles()\" translate>\n      Upload\n    </button>\n    <button class=\"button big\" (click)=\"newClickedAction()\" translate>\n      Close\n    </button>\n  </div>\n\n</div>\n\n<div id=\"fine-uploader-template\" style=\"display: none;\">\n  <div class=\"qq-uploader-selector qq-uploader\" qq-drop-area-text=\"Drop files here\">\n    <div class=\"qq-upload-drop-area-selector qq-upload-drop-area\" qq-hide-dropzone>\n      <span class=\"qq-upload-drop-area-text-selector\"></span>\n    </div>\n\n    <div class=\"upload-top-bar\">\n      <div class=\"qq-upload-button-selector qq-upload-button\">\n        <div translate>Upload a file</div>\n      </div>\n\n      <div class=\"qq-total-progress-bar-container-selector qq-total-progress-bar-container\">\n        <div role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n             class=\"qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar\"></div>\n      </div>\n    </div>\n\n    <span class=\"qq-drop-processing-selector qq-drop-processing\">\n            <span translate>Processing dropped files</span>...\n            <span class=\"qq-drop-processing-spinner-selector qq-drop-processing-spinner\"></span>\n    </span>\n\n    <ul class=\"qq-upload-list-selector qq-upload-list\" aria-live=\"polite\" aria-relevant=\"additions removals\">\n      <li>\n        <div class=\"qq-progress-bar-container-selector\">\n          <div role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n               class=\"qq-progress-bar-selector qq-progress-bar\"></div>\n        </div>\n        <span class=\"qq-upload-spinner-selector qq-upload-spinner\"></span>\n        <img class=\"qq-thumbnail-selector\" qq-max-size=\"100\" qq-server-scale>\n        <span class=\"qq-upload-file-selector qq-upload-file\"></span>\n        <span class=\"qq-edit-filename-icon-selector qq-edit-filename-icon\" aria-label=\"Edit filename\"></span>\n        <input class=\"qq-edit-filename-selector qq-edit-filename\" tabindex=\"0\" type=\"text\">\n        <span class=\"qq-upload-size-selector qq-upload-size\"></span>\n        <button type=\"button\" class=\"qq-btn qq-upload-cancel-selector qq-upload-cancel\" translate>Cancel</button>\n        <button type=\"button\" class=\"qq-btn qq-upload-retry-selector qq-upload-retry\" translate>Retry</button>\n        <button type=\"button\" class=\"qq-btn qq-upload-delete-selector qq-upload-delete\" translate>Delete</button>\n        <span role=\"status\" class=\"qq-upload-status-text-selector qq-upload-status-text\"></span>\n      </li>\n    </ul>\n\n    <dialog class=\"qq-alert-dialog-selector\">\n      <div class=\"qq-dialog-message-selector\"></div>\n      <div class=\"qq-dialog-buttons\">\n        <button type=\"button\" class=\"qq-cancel-button-selector\" translate>Close</button>\n      </div>\n    </dialog>\n\n    <dialog class=\"qq-confirm-dialog-selector\">\n      <div class=\"qq-dialog-message-selector\"></div>\n      <div class=\"qq-dialog-buttons\">\n        <button type=\"button\" class=\"qq-cancel-button-selector\" translate>No</button>\n        <button type=\"button\" class=\"qq-ok-button-selector\" translate>Yes</button>\n      </div>\n    </dialog>\n\n    <dialog class=\"qq-prompt-dialog-selector\">\n      <div class=\"qq-dialog-message-selector\"></div>\n      <input type=\"text\">\n      <div class=\"qq-dialog-buttons\">\n        <button type=\"button\" class=\"qq-cancel-button-selector\" translate>Cancel</button>\n        <button type=\"button\" class=\"qq-ok-button-selector\" translate>Ok</button>\n      </div>\n    </dialog>\n  </div>\n</div>\n`,\r\n  styles: [`.upload-content{text-align:center;max-height:25vh;overflow:auto;margin:10px auto}.fa-times:before{content:\"\\\\f00d\"}.buttons{background:#fff;padding:5px;margin:10px 0}`, `.qq-upload-button div{line-height:25px}.qq-upload-button-focus{outline:0}.qq-uploader{position:relative;min-height:200px;max-height:490px;overflow-y:hidden;width:inherit;border-radius:6px;background-color:#fdfdfd;border:1px dashed #ccc;padding:20px}.qq-uploader:before{content:attr(qq-drop-area-text) \" \";position:absolute;font-size:200%;left:0;width:100%;text-align:center;top:45%;opacity:.25}.qq-upload-drop-area,.qq-upload-extra-drop-area{position:absolute;top:0;left:0;width:100%;height:100%;min-height:30px;z-index:2;background:#f9f9f9;border-radius:4px;border:1px dashed #ccc;text-align:center}.qq-upload-drop-area span{display:block;position:absolute;top:50%;width:100%;margin-top:-8px;font-size:16px}.qq-upload-extra-drop-area{position:relative;margin-top:50px;font-size:16px;padding-top:30px;height:20px;min-height:40px}.qq-upload-drop-area-active{background:#fdfdfd;border-radius:4px;border:1px dashed #ccc}.qq-upload-list{margin:0;padding:0;list-style:none;max-height:450px;overflow-y:auto;clear:both}.qq-upload-list li{margin:0;padding:9px;line-height:15px;font-size:16px;color:#424242;background-color:#f6f6f6;border-top:1px solid #fff;border-bottom:1px solid #ddd}.qq-upload-list li:first-child{border-top:none}.qq-upload-list li:last-child{border-bottom:none}.qq-upload-cancel,.qq-upload-continue,.qq-upload-delete,.qq-upload-failed-text,.qq-upload-file,.qq-upload-pause,.qq-upload-retry,.qq-upload-size,.qq-upload-spinner{margin-right:12px;display:inline}.qq-upload-file{vertical-align:middle;display:inline-block;width:300px;text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden;height:18px}.qq-upload-spinner{display:inline-block;background:url(loading.gif);width:15px;height:15px;vertical-align:text-bottom}.qq-drop-processing{display:block}.qq-drop-processing-spinner{display:inline-block;background:url(processing.gif);width:24px;height:24px;vertical-align:text-bottom}.qq-upload-cancel,.qq-upload-continue,.qq-upload-delete,.qq-upload-pause,.qq-upload-retry,.qq-upload-size{font-size:12px;font-weight:400;cursor:pointer;vertical-align:middle}.qq-upload-status-text{font-size:14px;font-weight:700;display:block}.qq-upload-failed-text{display:none;font-style:italic;font-weight:700}.qq-upload-failed-icon{display:none;width:15px;height:15px;vertical-align:text-bottom}.qq-upload-fail .qq-upload-failed-text,.qq-upload-retrying .qq-upload-failed-text{display:inline}.qq-upload-list li.qq-upload-success{background-color:#ebf6e0;color:#424242;border-bottom:1px solid #d3ded1;border-top:1px solid #f7fff5}.qq-upload-list li.qq-upload-fail{background-color:#f5d7d7;color:#424242;border-bottom:1px solid #decaca;border-top:1px solid #fce6e6}.qq-total-progress-bar{height:25px;border-radius:9px}INPUT.qq-edit-filename{position:absolute;opacity:0;z-index:-1}.qq-upload-file.qq-editable{cursor:pointer;margin-right:4px}.qq-edit-filename-icon.qq-editable{display:inline-block;cursor:pointer}INPUT.qq-edit-filename.qq-editing{position:static;height:28px;padding:0 8px;margin-right:10px;margin-bottom:-5px;border:1px solid #ccc;border-radius:2px;font-size:16px;opacity:1}.qq-edit-filename-icon{display:none;background:url(edit.gif);width:15px;height:15px;vertical-align:text-bottom;margin-right:16px}.qq-hide{display:none}.qq-thumbnail-selector{vertical-align:middle;margin-right:12px}.qq-uploader DIALOG{display:none}.qq-uploader DIALOG[open]{display:block}.qq-uploader DIALOG .qq-dialog-buttons{text-align:center;padding-top:10px}.qq-uploader DIALOG .qq-dialog-buttons BUTTON{margin-left:5px;margin-right:5px}.qq-uploader DIALOG .qq-dialog-message-selector{padding-bottom:10px}.qq-uploader DIALOG::-webkit-backdrop{background-color:rgba(0,0,0,.7)}.qq-uploader DIALOG::backdrop{background-color:rgba(0,0,0,.7)}`],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class UploadComponent implements OnInit, AfterViewInit {\r\n  @Input() openDialog;\r\n\r\n  @Output() closeDialog = new EventEmitter();\r\n  @Output() createDir = new EventEmitter();\r\n\r\n  uploader: FineUploader;\r\n  newFolder = false;\r\n  counter = 0;\r\n\r\n  constructor(private http: HttpClient,\r\n              private nodeService: NodeService) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.uploader = new FineUploader({\r\n      debug: false,\r\n      autoUpload: false,\r\n      maxConnections: 1, // todo configurable\r\n      element: document.getElementById('fine-uploader'),\r\n      template: document.getElementById('fine-uploader-template'),\r\n      request: {\r\n        endpoint: this.nodeService.tree.config.baseURL + this.nodeService.tree.config.api.uploadFile,\r\n        // forceMultipart: false,\r\n        paramsInBody: false,\r\n        params: {\r\n          parentPath: this.getCurrentPath\r\n        }\r\n      },\r\n      retry: {\r\n        enableAuto: false\r\n      },\r\n      callbacks: {\r\n        onSubmitted: () => this.counter++,\r\n        onCancel: () => {\r\n          this.counter < 0 ? console.warn('wtf?') : this.counter--;\r\n        },\r\n        onAllComplete: (succ: any, fail: any) => {\r\n          if (succ.length > 0) {\r\n            this.counter = 0;\r\n            this.nodeService.refreshCurrentPath();\r\n          }\r\n        }\r\n      }\r\n    })\r\n    ;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  get getCurrentPath() {\r\n    const parentPath = this.nodeService.findNodeByPath(this.nodeService.currentPath).id;\r\n    return parentPath === 0 ? '' : parentPath;\r\n  }\r\n\r\n  uploadFiles() {\r\n    this.uploader.uploadStoredFiles();\r\n  }\r\n\r\n  createNewFolder(input?: string) {\r\n    if (!this.newFolder) {\r\n      this.newFolder = true;\r\n    } else {\r\n      this.newFolder = false;\r\n      if (input.length > 0) {\r\n        this.createDir.emit(input);\r\n        this.newClickedAction();\r\n      }\r\n    }\r\n  }\r\n\r\n  newClickedAction() {\r\n    this.uploader.cancelAll();\r\n    this.closeDialog.emit();\r\n  }\r\n}\r\n","import {Component, ElementRef, EventEmitter, OnInit, Output, ViewChild} from '@angular/core';\nimport {_} from '@biesbjerg/ngx-translate-extract/dist/utils/utils';\n\n@Component({\n  selector: 'app-new-folder',\n  template: `<p class=\"new-folder-description\" translate>Type new folder name</p>\n<input #uploadFolder placeholder=\"{{'Folder name' | translate}}\" (keyup)=\"onInputChange($event)\"\n       (keyup.enter)=\"onClick()\" onclick=\"this.select();\" type=\"text\" class=\"new-folder-input\"/>\n<button class=\"button new-folder-send\" (click)=\"onClick()\">{{buttonText | translate}}</button>\n`,\n  styles: [`.new-folder-description{margin:0 auto;padding:0}`]\n})\nexport class NewFolderComponent implements OnInit {\n  @ViewChild('uploadFolder') uploadFolder: ElementRef;\n  @Output() buttonClicked = new EventEmitter();\n\n  buttonText = _('Close').toString();\n  inputValue = '';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  onClick() {\n    const el: HTMLElement = (this.uploadFolder.nativeElement as HTMLElement);\n    // @ts-ignore\n    this.buttonClicked.emit(el.value);\n  }\n\n  onInputChange(event: any) {\n    this.inputValue = event.target.value;\n    if (this.inputValue.length > 0) {\n      this.buttonText = _('Confirm').toString();\n    } else {\n      this.buttonText = _('Close').toString();\n    }\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewEncapsulation} from '@angular/core';\r\nimport {NodeInterface} from '../../interfaces/node.interface';\r\n\r\n@Component({\r\n  selector: 'app-side-view',\r\n  template: `<div class=\"side-view\" *ngIf=\"node\">\n  <div class=\"side-view-preview\">\n    <i (click)=\"onClick($event, 'closeSideView')\" class=\"fas fa-times side-view-close\"></i>\n\n    <div class=\"side-view-preview-title\">{{node.name}}</div>\n\n    <div class=\"side-view-preview-content\">\n      <ng-container\n        [ngTemplateOutletContext]=\"{$implicit: node}\"\n        [ngTemplateOutlet]=\"sideViewTemplate\">\n      </ng-container>\n    </div>\n\n    <div class=\"side-view-buttons\">\n      <button (click)=\"onClick($event, 'download')\" class=\"button\"\n              [disabled]=\"!allowFolderDownload && node.isFolder\" translate>\n        Download\n      </button>\n      <button (click)=\"onClick($event, 'renameConfirm')\" class=\"button\" translate>Rename</button>\n      <button (click)=\"onClick($event, 'removeAsk')\" class=\"button\" translate>Delete</button>\n    </div>\n  </div>\n</div>\n`,\r\n  styles: [`.side-view-close{position:absolute;cursor:pointer;top:0;right:0;padding:15px}.side-view-buttons{width:100%;display:flex;justify-content:center;flex-flow:column}.side-view-buttons .button{margin:5px 0}`],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SideViewComponent implements OnInit {\r\n  @Input() sideViewTemplate: TemplateRef<any>;\r\n\r\n  @Input() node: NodeInterface;\r\n  @Input() allowFolderDownload = false;\r\n\r\n  @Output() clickEvent = new EventEmitter();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onClick(event: any, type: string) {\r\n    this.clickEvent.emit({type: type, event: event, node: this.node});\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\r\nimport {NodeClickedService} from '../../services/node-clicked.service';\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  template: `<div class=\"navigation-component\">\r\n  <input #input class=\"navigation-search\" onclick=\"this.select();\" (keyup.enter)=\"onClick(input.value)\"\r\n         placeholder=\"{{'Search' | translate}}\">\r\n\r\n  <button [disabled]=\"input.value.length === 0\" class=\"navigation-search-icon\" (click)=\"onClick(input.value)\">\r\n    <i class=\"fas fa-search\"></i>\r\n  </button>\r\n\r\n  <div>\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n\r\n\r\n`,\r\n  styles: [`.navigation-component{display:flex}`],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NavigationComponent implements OnInit {\r\n\r\n  constructor(\r\n    private nodeClickedService: NodeClickedService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onClick(input: string) {\r\n    this.nodeClickedService.searchForString(input);\r\n  }\r\n}\r\n","// import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FileManagerComponent} from './file-manager.component';\r\nimport {FolderContentComponent} from './components/folder-content/folder-content.component';\r\nimport {TreeComponent} from './components/tree/tree.component';\r\nimport {NodeListerComponent} from './components/tree/node-lister/node-lister.component';\r\nimport {NodeComponent} from './components/functions/node/node.component';\r\nimport {MapToIterablePipe} from './pipes/map-to-iterable.pipe';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {StoreModule} from '@ngrx/store';\r\nimport {NavBarComponent} from './components/nav-bar/nav-bar.component';\r\nimport {reducers} from './reducers/reducer.factory';\r\nimport {LoadingOverlayComponent} from './components/functions/loading-overlay/loading-overlay.component';\r\nimport {FileSizePipe} from './pipes/file-size.pipe';\r\nimport {UploadComponent} from './components/functions/upload/upload.component';\r\nimport {NewFolderComponent} from './components/functions/upload/new-folder/new-folder.component';\r\nimport {SideViewComponent} from './components/side-view/side-view.component';\r\nimport {NavigationComponent} from './components/navigation/navigation.component';\r\nimport {NgxSmartModalModule} from 'ngx-smart-modal';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\n\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, '/assets/i18n/', '.json');\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule,\r\n    StoreModule.forRoot(reducers),\r\n    CommonModule,\r\n    NgxSmartModalModule.forRoot(),\r\n    TranslateModule.forRoot({\r\n      loader:{\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]}\r\n    })\r\n  ],\r\n  declarations: [\r\n    FileManagerComponent,\r\n    FolderContentComponent,\r\n    NodeComponent,\r\n    TreeComponent,\r\n    NodeListerComponent,\r\n    MapToIterablePipe,\r\n    NavBarComponent,\r\n    LoadingOverlayComponent,\r\n    FileSizePipe,\r\n    UploadComponent,\r\n    NewFolderComponent,\r\n    SideViewComponent,\r\n    NavigationComponent\r\n  ],\r\n  exports: [\r\n    FileManagerComponent,\r\n    LoadingOverlayComponent,\r\n    SideViewComponent\r\n  ]\r\n})\r\nexport class FileManagerModule {\r\n  // static forRoot(): ModuleWithProviders {\r\n  //   return {\r\n  //     ngModule: FileManagerModule,\r\n  //     providers: [TranslateService]\r\n  //   };\r\n  // }\r\n}\r\n","import {NodeInterface} from '../interfaces/node.interface';\r\nimport {ConfigInterface} from '../interfaces/config.interface';\r\n\r\nexport class TreeModel {\r\n  private _currentPath: string;\r\n  private _nodes: NodeInterface;\r\n  private _selectedNodeId: string;\r\n  public config: ConfigInterface;\r\n\r\n  constructor(config: ConfigInterface) {\r\n    // this._currentPath = config.startingFolder; // todo implement (config.interfce.ts)\r\n    this._currentPath = '';\r\n    this.config = config;\r\n\r\n    this.nodes = <NodeInterface>{\r\n      id: 0,\r\n      pathToNode: '',\r\n      pathToParent: null,\r\n      isFolder: true,\r\n      isExpanded: true,\r\n      stayOpen: true,\r\n      name: 'root',\r\n      children: {}\r\n    };\r\n  }\r\n\r\n  get currentPath(): string {\r\n    return this._currentPath;\r\n  }\r\n\r\n  set currentPath(value: string) {\r\n    this._currentPath = value;\r\n  }\r\n\r\n  get nodes(): NodeInterface {\r\n    return this._nodes;\r\n  }\r\n\r\n  set nodes(value: NodeInterface) {\r\n    this._nodes = value;\r\n  }\r\n\r\n  get selectedNodeId(): string {\r\n    return this._selectedNodeId;\r\n  }\r\n\r\n  set selectedNodeId(value: string) {\r\n    this._selectedNodeId = value;\r\n  }\r\n\r\n  // todo implement (config.interfce.ts)\r\n  // get isCache(): boolean {\r\n  //   return this.config.offlineMode;\r\n  // }\r\n  //\r\n  // set isCache(value: boolean) {\r\n  //   this.config.offlineMode = value;\r\n  // }\r\n}\r\n"]}